#loading libraries for ICELLNET object
library(BiocGenerics)
install.packages("org.Hs.eg.db")
library("org.Hs.eg.db")
library("hgu133plus2.db")
library(jetset)
library(ggplot2)
library(dplyr)
library(icellnet)
library(gridExtra)

library(Seurat)

db=as.data.frame(read.csv(curl::curl(url="https://raw.githubusercontent.com/soumelis-lab/ICELLNET/master/data/ICELLNETdb.tsv"), sep="\t",header = T, check.names=FALSE, stringsAsFactors = FALSE, na.strings = ""))

#defining database based on Family of molecules
db.name.couple=name.lr.couple(db, type="Family")
head(db.name.couple)

install.packages("Seurat")
install.packages("NormalizeData")

#Loading seurat object
#Load data
seurat <- readRDS(file = "~/Downloads/train.Epi.seur.rds")
seurat <- NormalizeData(seurat)
seurat <- ScaleData(seurat)


#only for UMAP visualization, not for ICELLNET purpose
seurat <- FindVariableFeatures(seurat, selection.method = "vst", nfeatures = 2000)
seurat <- RunPCA(seurat)
seurat <- RunUMAP(seurat, dims = 1:50)
DimPlot(seurat, reduction = 'tsne', label = T)

seurat <- FindVariableFeatures(object = seurat, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5, nfeatures = 2000)
head(x = HVFInfo(object = seurat))

# Dimensional reduction plot, with cells colored by a quantitative feature
FeatureScatter(object = seurat, feature1 = "MS4A1", feature2 = "PC_1")

#gene expression on tsne
FeaturePlot(object = seurat, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "LYZ", "CD8A"), cols = c("grey", "blue"), reduction = "tsne")


#Calculating average gene expression per cluster

filter.perc=0 
average.clean = sc.data.cleaning(object = seurat, db=db, filter.perc = filter.perc, save_file = T, path = NULL, force.file = FALSE)


filter.perc=2
average.clean= sc.data.cleaning(object = seurat, db = db2, filter.perc = filter.perc, save_file = T, path=NULL, force.file = FALSE)

data.icell=as.data.frame(gene.scaling(as.data.frame(average.clean), n=1, db=db))

#PC.data=as.data.frame(data.icell[,c("Enterocyte Progenitors","Immature Enterocytes 1", "Symbol")], row.names = rownames(data.icell))


#PC.target=data.frame("Class"=c("Enterocyte Progenitors","Immature Enterocytes 1"), "ID"= c("Enterocyte Progenitors","Immature Enterocytes 1"), "Cell_type"=c("Enterocyte Progenitors","Immature Enterocytes 1"))
#rownames(PC.target)=c("Enterocyte Progenitors","Immature Enterocytes 1")

PC.data=as.data.frame(data.icell[,c("CD70","CD27", "Symbol")], row.names = rownames(data.icell))


PC.target=data.frame("Class"=c("CD70","CD27"), "ID"= c("CD70","CD27"), "Cell_type"=c("CD70","CD27"))
rownames(PC.target)=c("CD70","CD27")

my.selection=c("CD70","CD27")

#computing intercullular commmunication score
score.computation.1= icellnet.score(direction="out", PC.data=PC.data, 
                                    CC.data= as.data.frame(data.icell[,c("Enterocytes")], row.names = rownames(data.icell)),  
                                    PC.target = PC.target, PC=my.selection, CC.type = "RNAseq", 
                                    PC.type = "RNAseq",  db = db)
score1=as.data.frame(score.computation.1[[1]])
lr1=score.computation.1[[2]]

#Visualisation of contribution of family of molecules to communication scores
# label and color label if you are working families of molecules already present in the database
my.family=c("Growth factor","Chemokine","Checkpoint","Cytokine","Notch family","Antigen binding")
family.col = c( "Growth factor"= "#AECBE3", "Chemokine"= "#66ABDF", "Checkpoint"= "#1D1D18"  ,
                "Cytokine"="#156399", "Notch family" ="#676766", "Antigen binding" = "#12A039",  "other" = "#908F90",  "NA"="#908F90")

ymax=round(max(score1))+1 #to define the y axis range of the barplot

LR.family.score(lr=lr1, my.family=my.family, db.couple=db.name.couple, plot=F) # table of contribution of each family of molecule to the scores

LR.family.score(lr=lr1, my.family=my.family, db.couple=db.name.couple, plot=T, title="DC-T comm", family.col=family.col) #display barplot

colnames(lr1)=c("DC1_to_DC2", "DC2_to_DC1")
LR.balloon.plot(lr = lr1, thresh = 0 , topn=30 , sort.by="sum",  db.name.couple=db.name.couple, family.col=family.col, title="Most contributing interactions")

seurat[[]]

